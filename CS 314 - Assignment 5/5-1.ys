# Execution begins at address 0 
    .pos 0 
    irmovq stack, %rsp  # Set up stack pointer 
    call main # Execute main program 
    halt    # Terminate program 

#Array of 10 elements 
.align 8 
 
array:  
.quad 0x000000000001 
.quad 0x000000000002 
.quad 0x000000000003 
.quad 0x000000000004 
.quad 0x000000000005 
.quad 0x000000000006 
.quad 0x000000000007 
.quad 0x000000000008 
.quad 0x000000000010 
.quad 0x000000000009 

  
main: 

    irmovq array, %rsi  //The array
    irmovq $10, %rdx    //the size of the array is 10
    call sort       # sort(array, 10) 
    ret 

     

sort: 
//I tried so many different ways to implement the sort function but was unable to do it with out looking at this https://github.com/brycedigeronimo/y86-selection-sort/blob/master/5-1.ys. I changed it to fit our assignment and also included comments.
/*
    void sort(long *arr, long length) 
    {
        long sorted = 0;
        while (!sorted) 
        {
            sorted = 1;
            for (long i = 0; i < length - 1; ++i) 
            {
                if (arr[i] > arr[i + 1]) 
                {
                    swap(&arr[i], &arr[i + 1]);
                    sorted = 0;
                }
            }
        }
    }
    */
    /*
    #Goto - label
    void sort(long *arr, long length) 
    {
        long sorted = 0;
        
        
    loop:
        sorted = 1;
        for (long i = 0; i < length - 1; ++i) 
        {
            if (arr[i] > arr[i + 1]) 
            {
                swap(&arr[i], &arr[i + 1]);
                sorted = 0;
            }
        }

    if (!sorted) 
    {
        goto loop;
    }
    }
*/
    L1: 

            rrmovq %rsi, %r9 //inner loop pointer
            rrmovq %rsi, %rdi 
            rrmovq %rdx, %r11 //inner loop counter
        

    L2:   
            irmovq $8, %r10 
            addq %r10, %r9 
            mrmovq (%rdi), %r12 //current minimum
            mrmovq (%r9), %r13 
            subq %r12, %r13 
            cmovl %r9, %rdi //if r12 < r13 then r9 = rdi
            irmovq $1, %r14 
            subq %r14, %r11  
            andq %r11, %r11 
            jne L2 //jump when not equal
            call swap //calls swap when the value befoe with the value after
            addq %r10, %rsi 
            subq %r14, %rdx 
            andq %rdx, %rdx 
            jne L1 //jump when the size of the array is not eqaul to 10
            ret 


swap:   
    /*
    void swap(long *xp, long *yp) 
    {
        long x = *xp;
        long y = *yp;
        *xp = y;
        *yp = x;
    }
    */
        mrmovq (%rdi), %r12 //%rdi = *xp
        mrmovq (%rsi), %r13 //%rsi = *yp
        rmmovq %r13, (%rdi) 
        rmmovq %r12, (%rsi) 
        ret  


//Stack starts here and grows to lower addresses
    .pos 0x200
stack:
