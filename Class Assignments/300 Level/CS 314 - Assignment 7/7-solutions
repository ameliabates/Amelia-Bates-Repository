2. [60] Consider the following C code:
struct ColorPoint 
{
    long a;
    long r;
    long g;
    long b;
};

Also consider a 128B cache, organized as a single cache block (i.e., the cache is only big enough to hold a single block of data and therefore has only one set). Assume the following for the code below:
• sizeof(long) == 8, so sizeof(struct ColorPoint) == 32
• points begins at memory address 0.
• The cache is initially empty.
• The only memory accesses are to the entries of the array points. Variables i, j, and sum are stored in registers.
• Each access to a member of a ColorPoint requires a distinct memory read (e.g.,
points[0][0].a, points[0][0].r).


Hint: Memory is row major and cache blocks are contiguous regions of memory (see chapter 6.2-6.3). 

a. (20) Consider the following C code, in the context of the assumptions above:

long f(struct ColorPoint **points, int n) 
{
    long sum = 0;
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n; j++) 
        {
            sum += points[j][i].a;
            sum += points[j][i].r;
            sum += points[j][i].g;
            sum += points[j][i].b;
        }
    }
    return sum;
}

What is the miss rate of the cache when running this code assuming that n is 32? Answer in terms of misses/(hits + misses) in your solutions document.

Hint: Calculate the tag and offset for the first few memory reads and try to identify the pattern of hits and misses.

// 128 size cache / 32 size of ColorPoint = 4 structure

// points[0][0], points[1][0], points[2][0], points[3][0]

// each miss is followed by 3 hits

// 1024 * .25 = 256, 1024 * .75 = 768

// 256 / (768 + 256) = 1/4 = 25%
 





b. (20) Consider the following C code, in the context of the assumptions above:

long g(struct ColorPoint **points, int n) 
{
    long sum = 0;
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n; j++) 
        {
            sum += points[i][j].a;
            sum += points[i][j].r;
            sum += points[i][j].g;
            sum += points[i][j].b;
        }
    }
    return sum;
}


What is the miss rate of the cache when running this code assuming that n is 32? Answer in terms of misses/(hits + misses) in your solutions document.

Hint: Calculate the tag and offset for the first few memory reads and try to identify the pattern of hits and misses.

// 128 size cache / 32 size of ColorPoint = 4 structure

// 32 * 32 = 1024

// 1 miss for every hit

// 1024 / 2 = 512

// 512 / 1024 = 1/2 = 50%

// really unsure about this
